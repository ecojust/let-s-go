name: Desktop
on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    permissions:
      contents: write
      actions: write
      attestations: write
      deployments: write
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Rust setup
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # Sync node version and setup cache
      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      # Install pnpm globally
      - name: Install pnpm
        run: npm install -g pnpm

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: pnpm install

      - name: Install x86 Apple (x86 Apple only)
        if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
        run: rustup target add x86_64-apple-darwin

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # 获取当前日期和运行ID作为序号
      - name: Get date and run number
        id: date_run
        shell: bash
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "number=${{ github.run_number }}" >> $GITHUB_OUTPUT
          # 修改为符合semver的版本格式：主版本.次版本.修订版本
          echo "bundle_version=-${{ github.run_number }}" >> $GITHUB_OUTPUT
          # 获取最近一次提交的信息
          echo "commit_message=$(git log -1 --pretty=%B | head -n 1)" >> $GITHUB_OUTPUT
          # 获取短版本的commit SHA
          echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 修改 tauri.conf.json 文件
      - name: Update tauri.conf.json
        shell: bash
        run: |
          # 读取当前配置
          CONFIG_FILE="src-tauri/tauri.conf.json"
          # 使用 Node.js 更新 version
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('$CONFIG_FILE', 'utf8'));
            config.version += '${{ steps.date_run.outputs.bundle_version }}';
            fs.writeFileSync('$CONFIG_FILE', JSON.stringify(config, null, 2));
          "
          # 显示更新后的配置
          cat $CONFIG_FILE | grep version

      # Build the app
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: "v__VERSION__-${{ steps.date_run.outputs.date }}-${{ steps.date_run.outputs.number }}"
          releaseName: "__VERSION__ (${{ steps.date_run.outputs.date }}#${{ steps.date_run.outputs.number }})"
          releaseBody: |
            commit id: ${{ steps.date_run.outputs.commit_sha }}
            commit message: ${{ steps.date_run.outputs.commit_message }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
